plugins {
    id 'kotlin-multiplatform'
    id 'com.squareup.sqldelight'
    id 'com.android.application'
    id 'kotlin-android-extensions'
    //id 'kotlin-kapt'
    id 'kotlinx-serialization'
}
repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://dl.bintray.com/kotlin/ktor' }
}

android {
    dataBinding {
        enabled = true
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.molikuner.nigb'
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName 'v0.0.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    packagingOptions {
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-core.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-io.kotlin_module'
        pickFirst 'META-INF/kotlinx-io.kotlin_module'
        pickFirst 'META-INF/ktor-client-core.kotlin_module'
        pickFirst 'META-INF/ktor-client-json.kotlin_module'
        pickFirst 'META-INF/ktor-client-mock.kotlin_module'
        pickFirst 'META-INF/ktor-http.kotlin_module'
        pickFirst 'META-INF/ktor-utils.kotlin_module'
    }
}

kotlin {
    android('android')
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    //iosX64("ios") {
    //    binaries {
    //        framework()
    //    }
    //}
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('reflect')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.0'
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0'
                implementation 'io.ktor:ktor-client:1.1.3'
                implementation 'io.ktor:ktor-client-json:1.1.3'
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
                implementation kotlin('reflect')
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0'
                api 'io.ktor:ktor-client:1.1.3'
                api 'io.ktor:ktor-client-json:1.1.3'
                api 'io.ktor:ktor-client-mock:1.1.3'
                // since test are running in jvm -> also use jvm dependencies for platform dependent dependencies
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
                api 'io.ktor:ktor-client-json-jvm:1.1.5'
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation 'androidx.appcompat:appcompat:1.0.2'
                implementation 'androidx.legacy:legacy-support-v4:1.0.0'
                implementation 'com.google.android.material:material:1.1.0-alpha05'
                implementation 'androidx.recyclerview:recyclerview:1.0.0'
                implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
                implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha04'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.0'
                implementation 'com.squareup.sqldelight:android-driver:1.0.3'
                implementation 'io.ktor:ktor-client-json-jvm:1.1.3'
                implementation 'io.ktor:ktor-client-android:1.1.3'
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'io.ktor:ktor-client-mock-jvm:1.1.3'
            }
        }
        iosMain {
            dependencies {
                implementation 'com.squareup.sqldelight:ios-driver:1.0.3'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.0'
            }
        }
        iosTest {
            dependencies {
                api 'io.ktor:ktor-client-mock-native:1.1.3'
            }
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
//task copyFramework {
//    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
//    def target = project.findProperty('kotlin.target') ?: 'ios'
//    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask
//
//    doLast {
//        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
//        def targetDir = getProperty('configuration.build.dir')
//        copy {
//            from srcFile.parent
//            into targetDir
//            include 'app.framework/**'
//            include 'app.framework.dSYM'
//        }
//    }
//}

sqldelight {
    packageName = 'com.molikuner.vpapp.data.local'
    sourceSet = files('src/commonMain/sqldelight')
    //Database {
    //    packageName = 'com.molikuner.vpapp.data.local'
    //    sourceFolders = ['sqldelight']
    //}
}
